import React, { useEffect } from 'react';
import { useWhislists } from '../../hooks/index';
import { Card, Button } from 'react-bootstrap';
import { FaHeart } from "react-icons/fa";
import { Link } from 'react-router-dom';
import { BsGeoAlt } from "react-icons/bs";

const Wishlist = () => {
  const { wishlistData, isLoading, refetch, mutate } = useWhislists();

  useEffect(() => {
    refetch();
  }, [refetch]);

  const handleToggleWishlist = (restaurant) => {
    const isFavorite = wishlistData.some(item => item.id === restaurant.id);
    mutate({ id: restaurant.id, isFavorite }, {
      onSuccess: () => console.log(`${isFavorite ? 'Removed from' : 'Added to'} wishlist:`, restaurant.id),
    });
  };

  if (isLoading) {
    return (
      <div className="container mt-5 py-4 text-center">
        <div className="spinner-border text-success" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
      </div>
    );
  }

  return (
    <div className='container mt-5 py-4'>
      <h2 className="all-heading mb-4 text-center underline">Your Wishlist</h2>
      <div className='row'>
        {wishlistData.length > 0 ? (
          wishlistData.map((restaurant) => (
            <div className='col-md-6 mb-4' key={restaurant.id}>
              <Card className="h-100 position-relative shadow-sm hover-effect">
                <div className="position-absolute" style={{ top: '10px', right: '10px', zIndex: 2 }}>
                  <Button
                    variant="link"
                    className={`p-0 ${wishlistData.some(item => item.id === restaurant.id) ? 'text-danger' : 'text-secondary'}`}
                    onClick={() => handleToggleWishlist(restaurant)}
                  >
                    <FaHeart size={20} />
                  </Button>
                </div>
                <Card.Body className="p-3">
                  <div className="d-flex">
                    <div className="me-3">
                      <img
                        src={restaurant.images?.[0] || 'placeholder-image.jpg'}
                        alt={restaurant.restaurant_name}
                        className="rounded shadow-sm"
                        style={{ width: "100px", height: "100px", objectFit: "cover" }}
                      />
                    </div>
                    <div className="flex-grow-1">
                      <h5 className="mb-1 fw-bold">{restaurant.restaurant_name}</h5>
                      <p className="mb-1 text-muted small">
                        <span className={`badge ${restaurant.type === 'veg' ? 'bg-success' : 'bg-danger'} me-2`}>
                          {restaurant.type}
                        </span>
                      </p>
                      <div className="d-flex align-items-center mb-2 small text-muted">
                        <BsGeoAlt size={14} className="me-1" />
                        <span>{restaurant.location}</span>
                      </div>
                      <div className="mt-2 d-flex gap-2">
                        <Link to="/menu">
                          <Button variant="success" size="sm" className="rounded-2 px-3 all-button">
                            Book Table
                          </Button>
                        </Link>
                        <Link to="/menu">
                          <Button variant="outline-success" size="sm" className="rounded-2 px-3 all-button text-light">
                            View Menu
                          </Button>
                        </Link>
                      </div>
                    </div>
                  </div>
                </Card.Body>
              </Card>
            </div>
          ))
        ) : (
          <div className="col-12 text-center py-4">
            <p className="text-muted">Your wishlist is empty.</p>
            <Link to="/#Restaurants" className="btn btn-outline-success">
              Browse Restaurants
            </Link>
          </div>
        )}
      </div>
    </div>
  );
};

export default Wishlist;
import React, { useState, useEffect } from 'react';
import Slider from 'react-slick';
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";
import { r1, r2, r3, r4 } from '../../../assets/index';
import "./OurResturant.css";
import { BiSolidOffer } from "react-icons/bi";
import { Link } from 'react-router-dom';
import { FaBowlFood } from "react-icons/fa6";
import { Card, Button, Form } from 'react-bootstrap';
import {
  FaRegHeart, FaHeart, FaArrowRight, FaLeaf,
} from "react-icons/fa";
import { BsGeoAlt } from "react-icons/bs";
import { AiOutlineGlobal } from "react-icons/ai";
import { BiFilterAlt } from "react-icons/bi";
import { useRestaurants, useWhislists } from '../../hooks/index';

const OurRestaurant = ({ selectedLocation }) => {
  const { data: restaurants, isLoading } = useRestaurants();
  const { wishlistData, mutate: wishlistMutate } = useWhislists();
  const [filters, setFilters] = useState({
    veg: false,
    nonVeg: false,
    offers: false,
  });
  const [favorites, setFavorites] = useState({});
  useEffect(() => {
    if (wishlistData && wishlistData.length > 0) {
      const wishlistMap = {};
      wishlistData.forEach(item => {
        wishlistMap[item.id] = true;
      });
      setFavorites(wishlistMap);
    }
  }, [wishlistData]);

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  };

  const sliderSettings = {
    dots: false,
    infinite: true,
    speed: 500,
    slidesToShow: 1,
    slidesToScroll: 1,
    autoplay: true,
    autoplaySpeed: 2000,
    arrows: false,
  };

  const toggleFilter = (filterName) => {
    setFilters(prev => ({
      ...prev,
      [filterName]: !prev[filterName]
    }));
  };

  const toggleFavorite = (id) => {
    setFavorites(prev => {
      const isFavorite = prev[id];
      return {
        ...prev,
        [id]: !isFavorite
      };
    });
    wishlistMutate({ 
      id, 
      isFavorite: favorites[id] || false 
    });
  };

  const resetFilters = () => {
    setFilters({
      veg: false,
      nonVeg: false,
      offers: false
    });
  };

  const filteredRestaurants = () => {
    let filtered = restaurants || [];

    const noFiltersActive = !filters.veg && !filters.nonVeg && !filters.offers;

    if (!noFiltersActive) {
      if (filters.veg && filters.nonVeg) {
        filtered = filtered.filter(restaurant =>
          restaurant.type === 'veg' || restaurant.type === 'non_veg'
        );
      } else if (filters.veg) {
        filtered = filtered.filter(restaurant => restaurant.type === 'veg');
      } else if (filters.nonVeg) {
        filtered = filtered.filter(restaurant => restaurant.type === 'non_veg');
      }

      if (filters.offers) {
        filtered = filtered.filter(restaurant => restaurant.bestOffer);
      }
    }
    if (selectedLocation) {
      filtered = filtered.filter(restaurant =>
        restaurant.location.toLowerCase() === selectedLocation.toLowerCase()
      );
    }
    return filtered.map(restaurant => ({
      id: restaurant.id,
      restaurant_name: restaurant.restaurant_name,
      opening_time: restaurant.opening_time,
      closing_time: restaurant.closing_time,
      location: restaurant.location,
      type: restaurant.type,
      images: restaurant.images,
      rating: restaurant.rating,
      opening_hours: restaurant.opening_hours,
    }));
  };

  const renderStars = (rating) => {
    const stars = [];
    for (let i = 0; i < 5; i++) {
      stars.push(
        <span key={i} className="text-warning">
          {i < Math.floor(rating) ? "★" : "☆"}
        </span>
      );
    }
    return stars;
  };

  const isOpen = (openingTime, closingTime) => {
    if (!openingTime || !closingTime) return false;

    const normalizeTime = (time) => time.trim().replace(/\s+/g, '');

    const [openHour, openMinutePart] = normalizeTime(openingTime).split(':');
    const openPeriod = openMinutePart.slice(-2); 
    const openMinutes = openMinutePart.slice(0, -2); 
    const openDate = new Date();
    openDate.setHours(
      parseInt(openHour) % 12 + (openPeriod.toUpperCase() === 'PM' ? 12 : 0),
      parseInt(openMinutes)
    );

    const [closeHour, closeMinutePart] = normalizeTime(closingTime).split(':');
    const closePeriod = closeMinutePart.slice(-2);
    const closeMinutes = closeMinutePart.slice(0, -2); 
    const closeDate = new Date();
    closeDate.setHours(
      parseInt(closeHour) % 12 + (closePeriod.toUpperCase() === 'PM' ? 12 : 0),
      parseInt(closeMinutes)
    );

    const now = new Date();
    if (closeDate < openDate) {
      closeDate.setDate(closeDate.getDate() + 1);
    }

    return now >= openDate && now < closeDate;
  };

  return (
    <div className='container-fluid mt-5 py-4' id="Restaurants">
      <div className="text-center mb-4">
        <h2 className="all-heading mb-4 text-center underline">Most Popular Restaurants</h2>
      </div>

      <div className='row'>
        <div className='col-sm-4 px-3'>
          <Slider {...sliderSettings}>
            <div><img className="resturant-image" src={r1} alt="Restaurant 1" /></div>
            <div><img className="resturant-image" src={r2} alt="Restaurant 2" /></div>
            <div><img className="resturant-image" src={r3} alt="Restaurant 3" /></div>
            <div><img className="resturant-image" src={r4} alt="Restaurant 4" /></div>
          </Slider>
        </div>
        <div className='col-lg-8 col-md-12 px-3'>
          <div className="card shadow-sm mb-4 p-2 border-0">
            <div className="d-flex justify-content-between align-items-center flex-wrap">
              <div className="d-flex align-items-center mb-2">
                <BiFilterAlt size={20} className="me-2 text-success" />
                <h5 className="mb-0">Filter Restaurants</h5>
              </div>
              <Button
                variant="outline-success"
                size="sm"
                onClick={resetFilters}
                className="mb-2"
              >
                Reset Filters
              </Button>
            </div>

            <div className="d-flex flex-wrap gap-4 mt-2 fs-5">
              <Form.Check
                type="switch"
                id="veg-switch"
                label={<><FaLeaf className="text-success" /> Vegetarian</>}
                checked={filters.veg}
                onChange={() => toggleFilter('veg')}
                className="custom-switch"
              />
              <Form.Check
                type="switch"
                id="nonveg-switch"
                label={<><FaBowlFood className="text-danger" /> Non-Vegetarian</>}
                checked={filters.nonVeg}
                onChange={() => toggleFilter('nonVeg')}
                className="custom-switch"
              />
              <Form.Check
                type="switch"
                id="offers-switch"
                label={<><BiSolidOffer className="text-danger" /> Great Offer</>}
                checked={filters.offers}
                onChange={() => toggleFilter('offers')}
                className="custom-switch"
              />
              {selectedLocation && (
                <span className="text-dark">📍{selectedLocation}</span>
              )}
            </div>
          </div>

          <div className='row'>
            {isLoading ? (
              <div className="col-12 text-center py-5">
                <div className="spinner-border text-success" role="status">
                  <span className="visually-hidden">Loading...</span>
                </div>
              </div>
            ) : filteredRestaurants().length === 0 ? (
              <div className="col-12 text-center py-4">
                <p className="text-muted">No restaurants match your selected filters.</p>
              </div>
            ) : (
              filteredRestaurants().slice(0, 8).map((restaurant, index) => (
                <div className='col-md-6 mb-4' key={index}>
                  <Card className="h-100 position-relative shadow-sm hover-effect">
                    <div className="position-absolute" style={{ top: '10px', right: '10px', zIndex: 2 }}>
                      <Button
                        variant="link"
                        className={`p-0 ${favorites[restaurant.id] ? 'text-danger' : 'text-muted'}`}
                        onClick={() => toggleFavorite(restaurant.id)}
                      >
                        {favorites[restaurant.id] ? <FaHeart size={20} /> : <FaRegHeart size={20} />}
                      </Button>
                    </div>
                    <div className={`position-absolute start-0 mt-2 ms-2 rounded-pill px-2 py-1 bg-${isOpen(restaurant.opening_time, restaurant.closing_time) ? 'success' : 'danger'} text-white small`} style={{ zIndex: 1 }}>
                      {isOpen(restaurant.opening_time, restaurant.closing_time) ? "OPEN NOW" : "CLOSED"}
                    </div>
                    <Card.Body className="p-3">
                      <div className="d-flex">
                        <div className="me-3">
                          <img
                            src={restaurant.images && restaurant.images[0] ? restaurant.images[0] : r1}
                            alt={restaurant.restaurant_name}
                            className="rounded shadow-sm"
                            style={{ width: "100px", height: "100px", objectFit: "cover" }}
                          />
                        </div>
                        <div className="flex-grow-1">
                          <div className="d-flex justify-content-between align-items-start">
                            <h5 className="mb-1 fw-bold">{restaurant.restaurant_name}</h5>
                            <div className="d-flex align-items-center">
                              <span className="me-1 mt-1">{renderStars(restaurant.rating)}</span>
                              <span className="small text-muted me-5">({restaurant.rating})</span>
                            </div>
                          </div>

                          <p className="mb-1 text-muted small">
                            <span className={`badge ${restaurant.type === 'veg' ? 'bg-success' : 'bg-danger'} me-2`}>
                              {restaurant.type}
                            </span>
                          </p>

                          <div className="d-flex align-items-center mb-2 small text-muted">
                            <BsGeoAlt size={14} className="me-1" />
                            <span className="me-2">{restaurant.location}</span>
                            <AiOutlineGlobal size={14} className="me-1" />
                            <span>India</span>
                          </div>

                          <div className="mt-2 d-flex gap-2">
                            <Link to="/menu" onClick={scrollToTop}>
                              <Button variant="success" size="sm" className="rounded-2 px-3 all-button">
                                Book Table
                              </Button>
                            </Link>
                            <Link to="/menu" onClick={scrollToTop}>
                              <Button variant="outline-success" size="sm" className="rounded-2 px-3 all-button text-light">
                                View Menu
                              </Button>
                            </Link>
                          </div>
                        </div>
                      </div>
                    </Card.Body>
                  </Card>
                </div>
              ))
            )}
          </div>

          {filteredRestaurants().length > 6 && (
            <div className='text-center mt-2'>
              <Link to="/allresturant" className='text-dark text-decoration-none '>
                View More <FaArrowRight className='ms-2' />
              </Link>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default OurRestaurant;



import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import axiosInstance from '../axios/axios';

const useWhislists = () => {
  const queryClient = useQueryClient();
  
  const fetchWishlist = async () => {
    try {
      const response = await axiosInstance.get('/restaurant/wishlist');
      return response.data.data || [];
    } catch (error) {
      console.error("Error fetching wishlist:", error);
      return [];
    }
  };

  const addToWishlist = async (id) => {
    try {
      const response = await axiosInstance.put(`/restaurant/wishlist/${id}`);
      return response.data;
    } catch (error) {
      console.error("Error adding to wishlist:", error);
      throw error;
    }
  };

  const removeFromWishlist = async (id) => {
    try {
      const response = await axiosInstance.put(`/restaurant/wishlist/${id}`);
      return response.data;
    } catch (error) {
      console.error("Error removing from wishlist:", error);
      throw error;
    }
  };

  const { data: wishlistData = [], isLoading, refetch } = useQuery({
    queryKey: ['wishlist'],
    queryFn: fetchWishlist,
    staleTime: 10000, 
  });

  const mutation = useMutation({
    mutationFn: async ({ id, isFavorite }) => {
      return isFavorite ? removeFromWishlist(id) : addToWishlist(id);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['wishlist'] });
      refetch(); 
    },
  });

  return { 
    wishlistData, 
    isLoading, 
    mutate: mutation.mutate,
    refetch 
  };
};

export default useWhislists;








import React from 'react';
import { Container, Form, Button, Card, Row, Col, InputGroup } from 'react-bootstrap';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import './BookTable.css';
import {useBookTables} from '../../hooks/index';

const phoneRegExp =
  /^(\+?\d{0-9})?\s?-?\s?(\(?\d{7}\)?)\s?-?\s?(\(?\d{3}\)?)\s?-?\s?(\(?\d{4}\)?)?$/;

const BookTable = () => {
  const { mutate } = useBookTables();

  const formik = useFormik({
    initialValues: {
      name: '',
      mobile: '',
      people: '',
      date: '',
      time: '',
      specialRequests: '',
    },
    validationSchema: Yup.object({
      name: Yup.string()
        .max(15, "Must be 15 characters or less")
        .required('Required'),
        contact_no: Yup.string()
        .required('Required')
        .matches(phoneRegExp, "Phone number is not valid"),
      people: Yup.number()
        .required('Required')
        .min(1, 'Must be at least 1')
        .max(20, 'Must be at most 20'),
      date: Yup.date().required('Required'),
      time: Yup.string().required('Required'),
    }),
    onSubmit: (values) => {
      const bookingData = {
        customer_name: values.name,
        contact_no: values.contact_no,
        num_of_people: values.people,
        booking_time: values.time,
        date: values.date,
        instruction: values.specialRequests || '',
      };

      mutate(bookingData); 
      formik.resetForm(); 
    },
  });

  return (
    <Container fluid className="py-5 mb-5">
      <Row className="justify-content-center">
        <Col lg={8} md={10} sm={12}>
          <Card className="shadow border-0">
            <Card.Header className="text-center p-4 all-button text-white">
              <h2 className="fw-bold">RESERVE YOUR TABLE</h2>
              <p className="mb-0">Experience exceptional dining at our restaurant</p>
            </Card.Header>
            <Card.Body className="p-4">
              <Form onSubmit={formik.handleSubmit}>
                <Row className="mb-3">
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label className="fw-bold">Your Name</Form.Label>
                      <InputGroup>
                        <InputGroup.Text className="bg-light">
                          <i className="bi bi-person-fill"></i>
                        </InputGroup.Text>
                        <Form.Control
                          type="text"
                          name="name"
                          placeholder="Enter your full name"
                          value={formik.values.name}
                          onChange={formik.handleChange}
                          onBlur={formik.handleBlur}
                          isInvalid={formik.touched.name && formik.errors.name}
                          required
                        />
                        <Form.Control.Feedback type="invalid">
                          {formik.errors.name}
                        </Form.Control.Feedback>
                      </InputGroup>
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label className="fw-bold">Mobile Number</Form.Label>
                      <InputGroup>
                        <InputGroup.Text className="bg-light">
                          <i className="bi bi-phone-fill"></i>
                        </InputGroup.Text>
                        <Form.Control
                          type="tel"
                          name="contact_no"
                          placeholder="Enter your contact number"
                          value={formik.values.contact_no}
                          onChange={formik.handleChange}
                          onBlur={formik.handleBlur}
                          isInvalid={formik.touched.contact_no && formik.errors.contact_no}
                          required
                        />
                        <Form.Control.Feedback type="invalid">
                          {formik.errors.contact_no}
                        </Form.Control.Feedback>
                      </InputGroup>
                    </Form.Group>
                  </Col>
                </Row>
                <Row className="mb-3">
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label className="fw-bold">Number of Guests</Form.Label>
                      <InputGroup>
                        <InputGroup.Text className="bg-light">
                          <i className="bi bi-people-fill"></i>
                        </InputGroup.Text>
                        <Form.Control
                          type="number"
                          name="people"
                          placeholder="Number of people"
                          min="1"
                          max="20"
                          value={formik.values.people}
                          onChange={formik.handleChange}
                          onBlur={formik.handleBlur}
                          isInvalid={formik.touched.people && formik.errors.people}
                          required
                        />
                        <Form.Control.Feedback type="invalid">
                          {formik.errors.people}
                        </Form.Control.Feedback>
                      </InputGroup>
                    </Form.Group>
                  </Col>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label className="fw-bold">Date</Form.Label>
                      <InputGroup>
                        <InputGroup.Text className="bg-light">
                          <i className="bi bi-calendar-event-fill"></i>
                        </InputGroup.Text>
                        <Form.Control
                          type="date"
                          name="date"
                          value={formik.values.date}
                          onChange={formik.handleChange}
                          onBlur={formik.handleBlur}
                          isInvalid={formik.touched.date && formik.errors.date}
                          required
                        />
                        <Form.Control.Feedback type="invalid">
                          {formik.errors.date}
                        </Form.Control.Feedback>
                      </InputGroup>
                    </Form.Group>
                  </Col>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label className="fw-bold">Time</Form.Label>
                      <InputGroup>
                        <InputGroup.Text className="bg-light">
                          <i className="bi bi-clock-fill"></i>
                        </InputGroup.Text>
                        <Form.Control
                          type="time"
                          name="time"
                          value={formik.values.time}
                          onChange={formik.handleChange}
                          onBlur={formik.handleBlur}
                          isInvalid={formik.touched.time && formik.errors.time}
                          required
                        />
                        <Form.Control.Feedback type="invalid">
                          {formik.errors.time}
                        </Form.Control.Feedback>
                      </InputGroup>
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group className="mb-4">
                      <Form.Label className="fw-bold">Selected Menu Items</Form.Label>
                      <Form.Control as="textarea" rows={3} 
                    
                       />
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group className="mb-4">
                      <Form.Label className="fw-bold">Selected Menu Items</Form.Label>
                      <Form.Control as="textarea" rows={3} 
                    
                       />
                    </Form.Group>
                  </Col>
                </Row>
                <Form.Group className="mb-4">
                  <Form.Label className="fw-bold">Special Requests</Form.Label>
                  <Form.Control
                    as="textarea"
                    rows={3}
                    name="specialRequests"
                    placeholder="Any special requests or dietary requirements (optional)"
                    value={formik.values.specialRequests}
                    onChange={formik.handleChange}
                  />
                </Form.Group>
               
                <div className="d-grid gap-2 col-md-6 mx-auto">
                  <Button
                    variant="primary"
                    size="lg"
                    type="submit"
                    className="py-3 fw-bold all-button"
                  >
                    CONFIRM RESERVATION
                  </Button>
                </div>
              </Form>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default BookTable;

























import React, { useState, useRef, useEffect } from "react";
import { photo7 } from "../../../assets/index";
import { FaChevronLeft, FaChevronRight } from "react-icons/fa";
import { Swiper, SwiperSlide } from "swiper/react";
import "swiper/swiper-bundle.css";
import { FaRegSun } from "react-icons/fa6";
import { FaArrowUp } from "react-icons/fa6";
const Menus = () => {
  const [showAll, setShowAll] = useState(false);
  const [quantities, setQuantities] = useState({});
  const [showButton, setShowButton] = useState(false);
  const swiperRef = useRef(null);
  const handleNext = () => {
    swiperRef.current.swiper.slideNext();
  };
  const handlePrev = () => {
    swiperRef.current.swiper.slidePrev();
  };
  const sliderData = [
    {
      title: "30% off on all pizzas",
      description: "Enjoy your favorite slice!",
      icon: <FaRegSun size={50} className="text-dark opacity-75" />,
    },
    {
      title: "20% off on desserts",
      description: "Treat yourself today!",
      icon: <FaRegSun size={50} className="text-danger opacity-75" />,
    },
    {
      title: "Buy 1 Get 1 Free",
      description: "On selected beverages.",
      icon: <FaRegSun size={50} className="text-warning opacity-75" />,
    },
  ];

  const menuData = {
    categories: [
      {
        id: 1,
        name: "Appetizers",
        subcategories: [
          { id: 101, name: "Soups" },
          { id: 102, name: "Salads" },
          { id: 103, name: "Starters" },
        ],
      },
      {
        id: 2,
        name: "Main Course",
        subcategories: [
          { id: 201, name: "Vegetarian" },
          { id: 202, name: "Non-Vegetarian" },
          { id: 203, name: "Seafood" },
          { id: 204, name: "Chef's Special" },
        ],
      },
      {
        id: 3,
        name: "Desserts",
        subcategories: [
          { id: 301, name: "Ice Cream" },
          { id: 302, name: "Cakes" },
        ],
      },
      {
        id: 4,
        name: "Beverages",
        subcategories: [
          { id: 401, name: "Hot Drinks" },
          { id: 402, name: "Cold Drinks" },
          { id: 403, name: "Mocktails" },
        ],
      },
    ],
    products: [
      {
        id: 1,
        name: "Tomato Soup",
        price: 5.99,
        categoryId: 1,
        subcategoryId: 101,
        description: "Fresh tomatoes blended with herbs",
        image: photo7,
        isVeg: true,
        isBestSeller: true
      },
      {
        id: 2,
        name: "Caesar Salad",
        price: 7.99,
        categoryId: 1,
        subcategoryId: 102,
        description: "Crisp romaine lettuce with our signature dressing",
        image: photo7,
        isVeg: true,
        isBestSeller: false
      },
      {
        id: 3,
        name: "Garlic Bread",
        price: 4.99,
        categoryId: 1,
        subcategoryId: 103,
        description: "Freshly baked and topped with garlic butter",
        image: photo7,
        isVeg: true,
        isBestSeller: true
      },
      {
        id: 4,
        name: "Paneer Tikka",
        price: 12.99,
        categoryId: 2,
        subcategoryId: 201,
        description: "Marinated cottage cheese grilled to perfection",
        image: photo7,
        isVeg: true,
        isBestSeller: true
      },
      {
        id: 5,
        name: "Chicken Curry",
        price: 14.99,
        categoryId: 2,
        subcategoryId: 202,
        description: "Tender chicken in aromatic curry sauce",
        image: photo7,
        isVeg: false,
        isBestSeller: true
      },
      {
        id: 6,
        name: "Grilled Salmon",
        price: 18.99,
        categoryId: 2,
        subcategoryId: 203,
        description: "Fresh salmon with lemon herb butter",
        image: photo7,
        isVeg: false,
        isBestSeller: false
      },
      {
        id: 7,
        name: "Signature Biryani",
        price: 16.99,
        categoryId: 2,
        subcategoryId: 204,
        description: "Special rice preparation with premium spices",
        image: photo7,
        isVeg: false,
        isBestSeller: true
      },
      {
        id: 8,
        name: "Chocolate Ice Cream",
        price: 5.99,
        categoryId: 3,
        subcategoryId: 301,
        description: "Rich and creamy chocolate goodness",
        image: photo7,
        isVeg: true,
        isBestSeller: false
      },
      {
        id: 9,
        name: "Cheesecake",
        price: 6.99,
        categoryId: 3,
        subcategoryId: 302,
        description: "Smooth cream cheese on a crunchy base",
        image: photo7,
        isVeg: true,
        isBestSeller: true
      },
      {
        id: 10,
        name: "Green Tea",
        price: 3.99,
        categoryId: 4,
        subcategoryId: 401,
        description: "Refreshing green tea with health benefits",
        image: photo7,
        isVeg: true,
        isBestSeller: false
      },
      {
        id: 11,
        name: "Fresh Lime Soda",
        price: 4.99,
        categoryId: 4,
        subcategoryId: 402,
        description: "Tangy lime with soda water",
        image: photo7,
        isVeg: true,
        isBestSeller: false
      },
      {
        id: 12,
        name: "Virgin Mojito",
        price: 6.99,
        categoryId: 4,
        subcategoryId: 403,
        description: "Mint, lime, and soda in perfect harmony",
        image: photo7,
        isVeg: true,
        isBestSeller: true
      },
    ],
  };
  // button
  useEffect(() => {
    const handleScroll = () => {
      if (
        document.body.scrollTop > 20 ||
        document.documentElement.scrollTop > 20
      ) {
        setShowButton(true);
      } else {
        setShowButton(false);
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const backToTop = () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const updateQuantity = (productId, amount) => {
    setQuantities(prev => ({
      ...prev,
      [productId]: Math.max((prev[productId] || 0) + amount, 0),
    }));
  };
  const [expandedCategory, setExpandedCategory] = useState(null);
  const [activeCategory, setActiveCategory] = useState(null);
  const [activeSubcategory, setActiveSubcategory] = useState(null);
  const [vegFilter, setVegFilter] = useState(false);
  const [nonVegFilter, setNonVegFilter] = useState(false);
  const [bestSellerFilter, setBestSellerFilter] = useState(false);

  const toggleCategory = (categoryId) => {
    if (expandedCategory === categoryId) {
      setExpandedCategory(null);
    } else {
      setExpandedCategory(categoryId);
    }
  };

  const handleCategoryClick = (categoryId) => {
    setActiveCategory(categoryId);
    setActiveSubcategory(null);
    toggleCategory(categoryId);
  };

  const handleSubcategoryClick = (categoryId, subcategoryId) => {
    setActiveCategory(categoryId);
    setActiveSubcategory(subcategoryId);
  };

  const clearFilters = () => {
    setActiveCategory(null);
    setActiveSubcategory(null);
    setShowAll(false);
  }
  const getFilteredProducts = () => {
    let filtered = menuData.products;
    if (activeCategory) {
      filtered = filtered.filter(product => product.categoryId === activeCategory);

      if (activeSubcategory) {
        filtered = filtered.filter(product => product.subcategoryId === activeSubcategory);
      }
    }
    if (vegFilter && !nonVegFilter) {
      filtered = filtered.filter(product => product.isVeg);
    } else if (!vegFilter && nonVegFilter) {
      filtered = filtered.filter(product => !product.isVeg);
    } else if (!vegFilter && !nonVegFilter) {
    }
    if (bestSellerFilter) {
      filtered = filtered.filter(product => product.isBestSeller);
    }

    return filtered;
  };

  const countSubcategoryProducts = (categoryId, subcategoryId) => {
    return menuData.products.filter(
      (product) =>
        product.categoryId === categoryId &&
        product.subcategoryId === subcategoryId
    ).length;
  };

  const filteredProducts = getFilteredProducts();
  const handleVegFilterChange = (e) => {
    setVegFilter(e.target.checked);
  };

  const handleNonVegFilterChange = (e) => {
    setNonVegFilter(e.target.checked);
  };

  const handleBestSellerFilterChange = (e) => {
    setBestSellerFilter(e.target.checked);
  };
  ;

  return (
    <>
      <div className="container mt-4">
        {showButton && (
          <button
            onClick={backToTop}
            className="btn btn-danger btn-lg position-fixed"
            style={{
              bottom: '20px',
              right: '20px',
              zIndex: 1000,
              borderRadius: '50%',
            }}
          >
            <FaArrowUp />
          </button>
        )}

        <div className="position-relative">
          <Swiper
            ref={swiperRef}
            modules={[]}
            navigation={false}
            loop={true}
            slidesPerView={1}
            className="swiper-container"
          >
            {sliderData.map((slide, index) => (
              <SwiperSlide key={index} className="swiper-slide">
                <div className="d-flex align-items-center bg-light rounded-4 p-4 shadow-lg border border-1 border-light">
                  <div className="me-4">
                    <div className="rounded-circle d-flex justify-content-center align-items-center bg-white shadow-sm p-2">
                      {slide.icon}
                    </div>
                  </div>
                  <div className="flex-grow-1">
                    <span className="fw-bold text-dark fs-5">{slide.title}</span>
                    <p className="mb-0 text-dark small">{slide.description}</p>
                  </div>
                </div>
              </SwiperSlide>
            ))}
          </Swiper>
          <div className="custom-navigation d-lg-flex justify-content-end position-absolute top-50 end-0 translate-middle-y z-1 mx-3">
            <button
              onClick={handlePrev}
              className="prev-button border-0 bg-transparent mx-2"
            >
              <FaChevronLeft />
            </button>
            <button
              onClick={handleNext}
              className="next-button bg-transparent border-0"
            >
              <FaChevronRight />
            </button>
          </div>
        </div>
        <div className="row mt-5 ">
          <div className="col-md-3">
            <div className="card shadow-sm">
              <div className="card-header p-3 all-button text-white">
                <h5 className="mb-0 fs-3">Menu Categories</h5>
              </div>
              <div className="list-group list-group-flush ">
                <button
                  className={`list-group-item list-group-item-action d-flex justify-content-between align-items-center ₹{!activeCategory ? "active" : ""
                  }`}
                  onClick={clearFilters}
                >
                  All Items
                  <span className="badge bg-danger rounded-pill">
                    {menuData.products.length}
                  </span>
                </button>

                {menuData.categories.map((category) => (
                  <div key={category.id}>
                    <button
                      className={`list-group-item list-group-item-action d-flex justify-content-between align-items-center ₹{activeCategory === category.id && !activeSubcategory
                      ? "active"
                      : ""
                      }`}
                      onClick={() => handleCategoryClick(category.id)}
                    >
                      {category.name}
                      <div>
                        <span className="badge bg-secondary rounded-pill ">
                          {
                            menuData.products.filter(
                              (p) => p.categoryId === category.id
                            ).length
                          }
                        </span>
                        <i
                          className={`fas fa-chevron-₹{expandedCategory === category.id ? "up" : "down"
                          }`}
                        ></i>
                      </div>
                    </button>

                    {expandedCategory === category.id && (
                      <div className="subcategory-list">
                        {category.subcategories.map((subcategory) => (
                          <button
                            key={subcategory.id}
                            className={`list-group-item list-group-item-action d-flex justify-content-between align-items-center ps-4 ₹{activeSubcategory === subcategory.id ? "active" : ""
                            }`}
                            onClick={() =>
                              handleSubcategoryClick(category.id, subcategory.id)
                            }
                          >
                            {subcategory.name}
                            <span className="badge bg-secondary rounded-pill">
                              {countSubcategoryProducts(
                                category.id,
                                subcategory.id
                              )}
                            </span>
                          </button>
                        ))}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
            <div className="card mt-3 shadow-sm border-0 overflow-hidden">
              <div className="card-header p-3 all-button text-white">
                <h6 className="mb-0 fs-5">Dietary Preferences</h6>
              </div>
              <div className="card-body p-3 bg-light">
                <div className="d-flex flex-column gap-3">
                  <div className="form-check form-switch d-flex align-items-center p-2 bg-white rounded shadow-sm">
                    <input
                      className="form-check-input mx-1 me-4"
                      type="checkbox"
                      role="switch"
                      id="vegSwitch"
                      checked={vegFilter}
                      onChange={handleVegFilterChange}
                    />
                    <label className="form-check-label d-flex align-items-center" htmlFor="vegSwitch">
                      <span className="badge bg-success me-3">
                        <i className="fas fa-leaf"></i>
                      </span>
                      <span className="fw-medium">Vegetarian</span>
                    </label>
                  </div>

                  <div className="form-check form-switch d-flex align-items-center bg-white rounded shadow-sm p-2">
                    <input
                      className="form-check-input mx-1 me-4"
                      type="checkbox"
                      role="switch"
                      id="nonVegSwitch"
                      checked={nonVegFilter}
                      onChange={handleNonVegFilterChange}
                    />
                    <label className="form-check-label d-flex align-items-center" htmlFor="nonVegSwitch">
                      <span className="badge bg-danger me-3" >
                        <i className="fas fa-drumstick-bite"></i>
                      </span>
                      <span className="fw-medium">Non-Vegetarian</span>
                    </label>
                  </div>

                  <div className="form-check form-switch d-flex align-items-center p-2 bg-white rounded shadow-sm">
                    <input
                      className="form-check-input mx-1 me-4"
                      type="checkbox"
                      role="switch"
                      id="bestSellerSwitch"
                      checked={bestSellerFilter}
                      onChange={handleBestSellerFilterChange}
                    />
                    <label className="form-check-label d-flex align-items-center" htmlFor="bestSellerSwitch">
                      <span className="badge bg-warning text-dark me-3">
                        <i className="fas fa-star"></i>
                      </span>
                      <span className="fw-medium">Best Seller</span>
                    </label>
                  </div>
                </div>
              </div>
              <div className="card-footer bg-white p-3 text-center">
                <button
                  className="btn btn-sm btn-outline-secondary w-100 all-button text-light py-2 fw-bold"
                  onClick={() => {
                    setVegFilter(false);
                    setNonVegFilter(false);
                    setBestSellerFilter(false);
                  }}
                >
                  Reset Filters
                </button>
              </div>
            </div>
          </div>
          <div className="col-md-9">
            <div className="card shadow-sm">
              <div className="card-header all-button text-white d-flex justify-content-between align-items-center">
                <h5 className="mb-0">
                  {!activeCategory
                    ? "All Items"
                    : !activeSubcategory
                      ? menuData.categories.find((c) => c.id === activeCategory)
                        ?.name
                      : `₹{menuData.categories.find((c) => c.id === activeCategory)
                      ?.name
                    } > ₹{menuData.categories
                      .find((c) => c.id === activeCategory)
                      ?.subcategories.find((s) => s.id === activeSubcategory)
                      ?.name
                    }`}
                  {/* {(vegFilter || nonVegFilter || bestSellerFilter) && (
                  <span className="ms-2 fs-6">
                    {vegFilter && <span className="badge bg-success me-1">Veg</span>}
                    {nonVegFilter && <span className="badge bg-danger me-1">Non-Veg</span>}
                    {bestSellerFilter && <span className="badge bg-warning text-dark">Best Seller</span>}
                  </span>
                )} */}
                </h5>
                <span className="badge bg-light text-dark">
                  {filteredProducts.length} items
                </span>
              </div>
              <div className="card-body">
                {filteredProducts.length === 0 ? (
                  <div className="text-center py-5">
                    <p className="text-dark">No items found with the selected filters.</p>
                  </div>
                ) : (
                  <>
                    <div className="row row-cols-1 row-cols-md-2 g-4">
                      {(showAll ? filteredProducts : filteredProducts.slice(0, 8)).map((product) => (


                        <div key={product.id} className="col">
                          <div className="card h-100 border-0 shadow-sm">
                            <div className="row g-0">
                              <div className="col-4 position-relative">
                                <img
                                  src={product.image}
                                  className="img-fluid rounded-start h-100 object-fit-cover"
                                  alt={product.name}
                                />
                                <div className="position-absolute top-0 start-0 p-1">
                                  {/* Uncomment if needed */}
                                  {/* <span className={`badge ₹{product.isVeg ? 'bg-success' : 'bg-danger'}`}>
                      {product.isVeg ? 'Veg' : 'Non-Veg'}
                    </span> */}
                                  {product.isBestSeller && (
                                    <span className="badge bg-warning text-dark ms-1">Best Seller</span>
                                  )}
                                </div>
                              </div>
                              <div className="col-8">
                                <div className="card-body">
                                  <h5 className="card-title">{product.name}</h5>
                                  <p className="card-text text-dark small">{product.description}</p>
                                  <div className="d-flex justify-content-between align-items-center">
                                    <span className=" fw-bold text-success ">
                                      ₹{product.price.toFixed(2)}
                                    </span>
                                    <span className="text-dark">
                                      Total: ₹{(product.price * (quantities[product.id] || 0)).toFixed(2)}
                                    </span>
                                    <div className="d-flex align-items-center">
                                      <button
                                        className="btn btn-sm btn-outline-secondary"
                                        onClick={() => updateQuantity(product.id, -1)}
                                      >
                                        -
                                      </button>
                                      <span className="mx-2">{quantities[product.id] || 0}</span>
                                      <button
                                        className="btn btn-sm btn-outline-secondary"
                                        onClick={() => updateQuantity(product.id, 1)}
                                      >
                                        +
                                      </button>
                                    </div>
                                  </div>


                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>

                    {filteredProducts.length > 8 && !showAll && (
                      <div className="text-center mt-3">
                        <button
                          className="btn btn-outline-success all-button text-light fw-semibold"
                          onClick={() => setShowAll(true)}
                        >
                          View More <FaChevronRight className="ms-1" />
                        </button>
                      </div>
                    )}


                  </>
                )}
              </div>

            </div>
          </div>
        </div>
      </div>

    </>
  );
};

export default Menus;









import React, { useState } from "react";
import BookTable from "../../Components/BookTable/BookTable.jsx";
// Other imports...

const Menus = () => {
  const [quantities, setQuantities] = useState({});
  const [products, setProducts] = useState([/* Your product data here */]);
  
  const updateQuantity = (id, change) => {
    setQuantities((prevQuantities) => ({
      ...prevQuantities,
      [id]: Math.max((prevQuantities[id] || 0) + change, 0),
    }));
  };

  // Calculate total price for selected products
  const selectedProducts = products.filter(product => quantities[product.id] > 0);
  const totalPrice = selectedProducts.reduce(
    (total, product) => total + product.price * quantities[product.id],
    0
  );

  return (
    <>
      <div className="container mt-4">
        {/* Your existing code... */}
        
        <div className="row mt-5">
          <div className="col-md-9">
            {products.map(product => (
              <div key={product.id} className="col-8">
                <div className="card-body">
                  <h5 className="card-title">{product.name}</h5>
                  <p className="card-text text-dark small">{product.description}</p>
                  <div className="d-flex justify-content-between align-items-center">
                    <span className="fw-bold text-success">₹{product.price.toFixed(2)}</span>
                    <span className="text-dark">Total: ₹{(product.price * (quantities[product.id] || 0)).toFixed(2)}</span>
                    <div className="d-flex align-items-center">
                      <button className="btn btn-sm btn-outline-secondary" onClick={() => updateQuantity(product.id, -1)}>-</button>
                      <span className="mx-2">{quantities[product.id] || 0}</span>
                      <button className="btn btn-sm btn-outline-secondary" onClick={() => updateQuantity(product.id, 1)}>+</button>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Pass selected products and total price to BookTable */}
        <BookTable selectedProducts={selectedProducts} totalPrice={totalPrice} />
      </div>
    </>
  );
};

export default Menus;
import React from 'react';
// Other imports...

const BookTable = ({ selectedProducts, totalPrice }) => {
  // Your existing code...

  return (
    <Container fluid className="py-5 mb-5">
      <Row className="justify-content-center">
        <Col lg={8} md={10} sm={12}>
          <Card className="shadow border-0">
            <Card.Header className="text-center p-4 all-button text-white">
              <h2 className="fw-bold">RESERVE YOUR TABLE</h2>
              <p className="mb-0">Experience exceptional dining at our restaurant</p>
            </Card.Header>
            <Card.Body className="p-4">
              {/* Your existing form... */}
              
              <h5>Selected Menu Items:</h5>
              <ul>
                {selectedProducts.map(product => (
                  <li key={product.id}>
                    {product.name}: ₹{product.price.toFixed(2)} x {quantities[product.id]} = ₹{(product.price * quantities[product.id]).toFixed(2)}
                  </li>
                ))}
              </ul>
              <h5>Total Price: ₹{totalPrice.toFixed(2)}</h5>

              {/* Rest of your form... */}
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default BookTable;



























