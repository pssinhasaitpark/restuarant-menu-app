import React, { useState, useEffect, useRef } from "react";
import {
  Container,
  Form,
  Button,
  Card,
  Row,
  Col,
  InputGroup,

} from "react-bootstrap";
import { Modal, Button as BootstrapButton } from 'react-bootstrap';

import axios from 'axios';
import { useFormik } from "formik";
import * as Yup from "yup";
import { FaUser, FaMobile, FaCalendar } from "react-icons/fa";
import { IoPeopleSharp, IoTimeSharp } from "react-icons/io5";
import "./BookTable.css";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import "./BookTable.css";
import {
  fetchAvailableTables,
  bookTable,
} from "../../Redux/Slice/BookTableSlice/BookTableSlice";
const phoneRegExp =
  /^(\+?\d{0-9})?\s?-?\s?(\(?\d{7}\)?)\s?-?\s?(\(?\d{3}\)?)\s?-?\s?(\(?\d{4}\)?)?$/;


const generateTimeOptions = (openingTime, closingTime, interval = 15) => {
  const formatTime = (date) => {
    const hours = date.getHours();
    const minutes = date.getMinutes();
    const ampm = hours >= 12 ? "PM" : "AM";
    const formattedHours = hours % 12 || 12;
    const formattedMinutes = minutes.toString().padStart(2, "0");
    return `${formattedHours}:${formattedMinutes} ${ampm}`;
  };

  const timeOptions = [];

  const parseTime = (timeStr) => {
    const [hour, minute, period] = timeStr.match(/(\d+):(\d+)\s*(AM|PM)/i).slice(1);
    const date = new Date();
    date.setHours(
      (parseInt(hour) % 12) + (period.toUpperCase() === "PM" ? 12 : 0),
      parseInt(minute),
      0,
      0
    );
    return date;
  };

  const currentTime = new Date();
  const startDate = parseTime(openingTime);
  const endDate = parseTime(closingTime);
  const baseTime = currentTime > startDate ? currentTime : startDate;
  const roundedStart = new Date(baseTime);
  const minutes = roundedStart.getMinutes();
  const remainder = interval - (minutes % interval);
  roundedStart.setMinutes(minutes + remainder);
  roundedStart.setSeconds(0);
  roundedStart.setMilliseconds(0);

  while (roundedStart <= endDate) {
    timeOptions.push(formatTime(new Date(roundedStart)));
    roundedStart.setMinutes(roundedStart.getMinutes() + interval);
  }

  return timeOptions;
};


const BookTable = ({
  restaurantId,
  selectedMenuItems,
  openingTime,
  closingTime,
  setSelectedMenuItems,
}) => {
  const navigate = useNavigate();
  useEffect(() => {
    const script = document.createElement('script');
    script.src = 'https://checkout.razorpay.com/v1/checkout.js';
    script.async = true;
    script.onload = () => {
      console.log('Razorpay script loaded successfully');
    };
    script.onerror = () => {
      console.error('Error loading Razorpay script');
    };
    document.body.appendChild(script);
    return () => {
      document.body.removeChild(script);
    };
  }, []);

  const [selectedTables, setSelectedTables] = useState([]);

  const dispatch = useDispatch();
  const { availableTables, loading, error, bookingError } =
    useSelector((state) => state.tables);


  const timeOptions =
    openingTime && closingTime
      ? generateTimeOptions(openingTime, closingTime, 15)
      : [];


  const [showDropdown, setShowDropdown] = useState(false);
  const dropdownRef = useRef(null);

  useEffect(() => {
    if (restaurantId) {
      dispatch(fetchAvailableTables(restaurantId));
    }
  }, [dispatch, restaurantId]);

  useEffect(() => {
    const handleClickOutside = (e) => {
      if (dropdownRef.current && !dropdownRef.current.contains(e.target)) {
        setShowDropdown(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);
  const [isLogin, setIsLogin] = useState(true)
  const formik = useFormik({
    initialValues: {
      name: "",
      contact_no: "",
      people: "",
      date: "",
      time: "",
      specialRequests: "",
    },
    validationSchema: Yup.object({
      name: Yup.string()
        .max(15, "Must be 15 characters or less")
        .required("Required"),
      contact_no: Yup.string()
        .required("Required")
        .matches(phoneRegExp, "Phone number is not valid"),
      people: Yup.number()
        .required("Required")
        .min(1, "Must be at least 1")
        .max(20, "Must be at most 20"),
      date: Yup.date().required("Required"),
      time: Yup.string().required("Required"),
    }),
    onSubmit: async (values) => {
      if (!isLogin) {
        setShowLoginModal(true);
        return;
      }
      const bookingData = {
        customer_name: values.name,
        contact_no: values.contact_no,
        num_of_people: values.people,
        booking_time: values.time,
        date: values.date,
        instruction: values.specialRequests || "",
        table_numbers: selectedTables,
        menu_items: selectedMenuItems.map((item) => ({
          id: item.id,
          quantity: item.quantity,
        })),
      };

      const response = await dispatch(bookTable({ bookingData, restaurantId }));

      if (response.meta.requestStatus === 'fulfilled') {
        const { razorpay_order_id, total_charge } = response.payload.data;
        const options = {
          key: 'rzp_test_o55kuxiGDRZxSG',
          amount: total_charge * 100,
          currency: 'INR',
          name: 'Booking Table',
          description: 'Test Transaction',
          order_id: razorpay_order_id,
          handler: async function (response) {
            const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = response;

            try {
              const verificationResponse = await axios.post(
                `${import.meta.env.VITE_APP_BASE_URL}/booking/verifyPayment`,
                { razorpay_order_id, razorpay_payment_id, razorpay_signature }
              );

              if (verificationResponse.data.status) {
                console.log('Payment verified successfully!');
                formik.resetForm();


                setSelectedTables([]);
                setSelectedMenuItems();

                navigate("/");
              } else {
                console.error('Payment verification failed:', verificationResponse.data);
              }
            } catch (error) {
              console.error('Error verifying payment:', error);
            }
          },
          prefill: {
            name: values.name,
            email: values.email,
            contact_no: values.contact_no,
          },
          theme: {
            color: '#3399cc',
          },
        };

        const razorpay = new window.Razorpay(options);
        razorpay.open();
        razorpay.on('payment.failed', (paymentError) => {
          console.error('Payment Failed:', paymentError);
        });
      } else {
        console.error('Booking failed:', response.payload);
      }
    },
  });

  const handleTableSelect = (tableNumber) => {
    if (selectedTables.includes(tableNumber)) {
      setSelectedTables(
        selectedTables.filter((table) => table !== tableNumber)
      );
    } else {
      setSelectedTables([...selectedTables, tableNumber]);
    }
  };
  const [showLoginModal, setShowLoginModal] = useState(false);

  return (
    <Container fluid className="py-5 mb-5">
      <Row className="justify-content-center">
        <Col lg={8} md={10} sm={12}>
          <Card className="shadow border-0">
            <Card.Header className="text-center p-4 all-button text-white">
              <h2 className="fw-bold">RESERVE YOUR TABLE</h2>
              <p className="mb-0">
                Experience exceptional dining at our restaurant
              </p>
            </Card.Header>
            <Card.Body className="p-4">
              {bookingError && <p className="text-danger">{bookingError}</p>}
              <Form onSubmit={formik.handleSubmit}>
                <Row className="mb-3">
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label className="fw-bold">Your Name</Form.Label>
                      <InputGroup>
                        <InputGroup.Text className="all-button">
                          <FaUser className="text-light" />
                        </InputGroup.Text>
                        <Form.Control
                          type="text"
                          name="name"
                          placeholder="Enter your full name"
                          value={formik.values.name}
                          onChange={formik.handleChange}
                          onBlur={formik.handleBlur}
                          isInvalid={formik.touched.name && formik.errors.name}
                          required
                        />
                        <Form.Control.Feedback type="invalid">
                          {formik.errors.name}
                        </Form.Control.Feedback>
                      </InputGroup>
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label className="fw-bold">Mobile Number</Form.Label>
                      <InputGroup>
                        <InputGroup.Text className="all-button">
                          <FaMobile className="text-light" />
                        </InputGroup.Text>
                        <Form.Control
                          type="tel"
                          name="contact_no"
                          placeholder="Enter your contact number"
                          value={formik.values.contact_no}
                          onChange={formik.handleChange}
                          onBlur={formik.handleBlur}
                          isInvalid={
                            formik.touched.contact_no &&
                            formik.errors.contact_no
                          }
                          required
                        />
                        <Form.Control.Feedback type="invalid">
                          {formik.errors.contact_no}
                        </Form.Control.Feedback>
                      </InputGroup>
                    </Form.Group>
                  </Col>
                </Row>
                <Row className="mb-3">
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label className="fw-bold">
                        Number of Guests
                      </Form.Label>
                      <InputGroup>
                        <InputGroup.Text className="all-button">
                          <IoPeopleSharp className="text-light" />
                        </InputGroup.Text>
                        <Form.Control
                          type="number"
                          name="people"
                          placeholder="Number of people"
                          min="1"
                          max="20"
                          value={formik.values.people}
                          onChange={formik.handleChange}
                          onBlur={formik.handleBlur}
                          isInvalid={
                            formik.touched.people && formik.errors.people
                          }
                          required
                        />
                        <Form.Control.Feedback type="invalid">
                          {formik.errors.people}
                        </Form.Control.Feedback>
                      </InputGroup>
                    </Form.Group>
                  </Col>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label className="fw-bold">Date</Form.Label>
                      <InputGroup>
                        <InputGroup.Text className="all-button">
                          <FaCalendar className="text-light" />
                        </InputGroup.Text>
                        <Form.Control
                          type="date"
                          name="date"
                          min={new Date().toISOString().split("T")[0]}
                          value={formik.values.date}
                          onChange={formik.handleChange}
                          onBlur={formik.handleBlur}
                          isInvalid={formik.touched.date && formik.errors.date}
                          required
                        />

                        <Form.Control.Feedback type="invalid">
                          {formik.errors.date}
                        </Form.Control.Feedback>
                      </InputGroup>
                    </Form.Group>
                  </Col>
                  <Col md={4}>
                    <Form.Group className="mb-3">
                      <Form.Label className="fw-bold">Time</Form.Label>
                      <InputGroup>
                        <InputGroup.Text className="all-button">
                          <IoTimeSharp className="text-light" />
                        </InputGroup.Text>
                        <Form.Select
                          name="time"
                          value={formik.values.time}
                          onChange={formik.handleChange}
                          onBlur={formik.handleBlur}
                          isInvalid={formik.touched.time && formik.errors.time}
                        >
                          <option value="">Select time</option>
                          {timeOptions.map((time) => (
                            <option key={time} value={time}>
                              {time}
                            </option>
                          ))}
                        </Form.Select>

                        <Form.Control.Feedback type="invalid">
                          {formik.errors.time}
                        </Form.Control.Feedback>
                      </InputGroup>
                    </Form.Group>
                  </Col>
                  <Col md={5}>
                    <Form.Group>
                      <Form.Label className="fw-bold">
                        Booking Table No.s
                      </Form.Label>

                      <div ref={dropdownRef} className="position-relative">
                        <Button
                          variant="success"
                          className="w-100 all-button text-start"
                          onClick={() => setShowDropdown(!showDropdown)}
                        >
                          {selectedTables.length > 0
                            ? `Selected: ${selectedTables.join(", ")}`
                            : "Select Table Numbers"}
                        </Button>

                        {showDropdown && (
                          <div
                            className="position-absolute bg-white border rounded w-100 mt-1 p-2"
                            style={{
                              zIndex: 1000,
                              maxHeight: "200px",
                              overflowY: "auto",
                            }}
                          >
                            {loading ? (
                              <div>Loading...</div>
                            ) : error ? (
                              <div className="text-danger">{error}</div>
                            ) : (
                              availableTables.map((table) => (
                                <Form.Check
                                  key={table.table_number}
                                  type="checkbox"
                                  label={`Table ${table.table_number} (Capacity: ${table.capacity})`}
                                  checked={selectedTables.includes(
                                    table.table_number
                                  )}
                                  onChange={() =>
                                    handleTableSelect(table.table_number)
                                  }
                                  className="mb-2"
                                />
                              ))
                            )}
                          </div>
                        )}
                      </div>
                    </Form.Group>

                    {selectedTables.length > 0 && (
                      <div className="mt-2">
                        <strong>Selected Tables:</strong>
                        <ul className="d-flex flex-wrap list-unstyled mb-0">
                          {selectedTables.map((table) => (
                            <li key={table} className="me-3">
                              Table {table}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </Col>

                  <Col md={7}>
                    <Form.Group className="">
                      <Form.Label className="fw-bold">
                        Selected Menu Items
                      </Form.Label>
                      <Form.Control
                        as="textarea"
                        rows={3}
                        readOnly
                        value={
                          selectedMenuItems.length > 0
                            ? selectedMenuItems
                              .map((item) => {
                                console.log("Item ID:", item.id);
                                const totalPrice = item.price * item.quantity;
                                return `${item.name} - ₹${item.price} x ${item.quantity} = Total: ₹${totalPrice}`;
                              })
                              .join("\n")
                            : "No items selected"
                        }
                      />
                    </Form.Group>
                  </Col>
                </Row>
                <Form.Group className="mb-4">
                  <Form.Label className="fw-bold">Special Requests</Form.Label>
                  <Form.Control
                    as="textarea"
                    rows={3}
                    name="specialRequests"
                    placeholder="Any special requests or dietary requirements (optional)"
                    value={formik.values.specialRequests}
                    onChange={formik.handleChange}
                  />
                </Form.Group>

                <div className="d-grid gap-2 col-md-6 mx-auto">
                  <Button
                    variant="primary"
                    size="lg"
                    type="submit"
                    className="py-3 fw-bold all-button"
                  >
                    CONFIRM RESERVATION
                  </Button>
                </div>
              </Form>
              <Modal show={showLoginModal} onHide={() => setShowLoginModal(false)} centered>
                <Modal.Header closeButton>
                  <Modal.Title>Login Required</Modal.Title>
                </Modal.Header>
                <Modal.Body>You need to login first to confirm your reservation.</Modal.Body>
                <Modal.Footer>
                  <BootstrapButton variant="secondary" onClick={() => setShowLoginModal(false)}>
                    Close
                  </BootstrapButton>
                  <BootstrapButton variant="primary" onClick={() => navigate('/login')}>
                    Login
                  </BootstrapButton>
                </Modal.Footer>
              </Modal>

            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default BookTable;












































